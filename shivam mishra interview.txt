Virtusa questions/////////////////////////////////////////////////////////////////

Virtusa - Sibin T K
//////////////////////////////////////////////////////
input = ['a','a','b','a','b','c','b','c'] 
output = {'a':3,'b':3,'c':2}

check how many times an array element is repeating
////////////////////////

xx = [1,2,3,1,2,3];
remove duplicates from an array

/////////////////////////////////////////
console.log(1+"2"+"2")
//122

console.log(1+”2"-"2")
//10

/////////////////////
console.log([1,2,3]+[4,5,6])
1,2,34,5,6
/////////////////////
console.log(x);  //ref error: cannot access before initialization
const x = 9;
	
console.log(y);  //ref error: cannot access before initialization
let y = 10;

console.log(z); //undefined
var z = 11;

/////////////////////
console.log(3>2>1)
false
/////////////////////
console.log(1<2<3)
true

/////////////////////
[1,100,500,20,-100,12,10].sort()

[-100, 1, 10, 100, 12, 20, 500]
/////////////////////
[[0,1],[1,2]].reduce((a,b)=>{ return a.concat(b) },[1,2])
[1, 2, 0, 1, 1, 2]



const arr = [2, 3, 2, 4, 4, 5, 1, 1]
//output = 2, 4 ,1 

for(let i=0; i<arr.length; i++){
  if(arr.indexof(arr[i])===arr.lastIndex)
}
/////////////////////////////////////////////////////////////////
const arr = [[1,2],[3,4],[5,6]]
const output = Object.fromEntries([...arr]);
console.log(output);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arr = [2, 3, 2, 4, 4, 5, 1, 1];
//output = 2, 4 ,1

function checkUniq(arr) {
  const output = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {
      // console.log(arr[i], "unique element");
    } else {
      output.push(arr[i]);
      console.log(arr[i], "not unique element");
    }
  }
  return output;
}
const firstOp = checkUniq(arr);
const result = new Set(firstOp);
console.log(result);

//mobix //flux
//recoil - similar to hooks - tailwind CSS
//
//prime react

// how to check if element is repeating in an array

// arr = [9,10,14,1,2,2,3,4,5,14,10,9,5,6,6,7,8]
//  Expected_Output - [1,3,4,7,8,]

//  getUnique = (arr) => {

//    //logic here
//    return arr;
//  }

//  console.log(getUnique(arr))
// let arr = [1, [3, 4, [6, 7, 8]], 2, [2, 9, 5]];
// /**
//  * a=1
//  * b = [3,4,[6,7,8]]
//  *    b=[x,y]
//  * c=2
//  * d = [2,9,5]
//  * arr = [a,b,c,d]
//  * Expected output
//  * 1,3,4,6,7,8,2,2,9,5
//  */
// const output = arr.reduce((acc, curr) => {
//   return acc + curr;
// }, []);
// console.log(output);
// // console.log(arr.flat(2));
/////////////////////////////////////////////////////////////////////////////////////
Array flat method
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
